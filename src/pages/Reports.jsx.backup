import React, { useState, useEffect } from 'react';
import { 
  FileText, 
  CreditCard, 
  User, 
  Search, 
  Download, 
  Eye,
  X,
  Calendar,
  Filter,
  ChevronDown,
  ChevronLeft,
  ChevronRight
} from 'lucide-react';
import { getInvoiceHistory, getPaymentHistory, getUserHistory, getAreas } from '../api/reportApi';
import { searchCustomers } from '../api/paymentApi';
import useApiLoading from '../hooks/useApiLoading';
import Spinner from '../components/Spinner';
import Layout from '../components/Layout';
import useUserStore from '../store/userStore';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

const Reports = () => {
  const [loading, setLoading] = useState(false);
  const { isAuthenticated, user } = useUserStore();
  
  // State for active tab
  const [activeTab, setActiveTab] = useState('invoices');
  
  // State for invoice filters
  const [invoiceFilters, setInvoiceFilters] = useState({
    dateRange: {
      start: new Date(new Date().getFullYear() - 1, 0, 1).toISOString().split('T')[0], // Start from 1 year ago
      end: new Date().toISOString().split('T')[0] // End today
    },
    searchQuery: ''
  });

  // State for payment filters
  const [paymentFilters, setPaymentFilters] = useState({
    dateRange: {
      start: new Date(new Date().getFullYear() - 1, 0, 1).toISOString().split('T')[0],
      end: new Date().toISOString().split('T')[0]
    },
    searchQuery: ''
  });

  // State for data
  const [invoiceData, setInvoiceData] = useState({ invoices: [], pagination: {} });
  const [paymentData, setPaymentData] = useState({ payments: [], pagination: {} });
  const [userHistoryData, setUserHistoryData] = useState(null);
  const [areas, setAreas] = useState([]);
  const [error, setError] = useState(null);
  const [isMobile, setIsMobile] = useState(false);

  // State for PDF preview
  const [showPdfPreview, setShowPdfPreview] = useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState(null);
  const [showPaymentPdfPreview, setShowPaymentPdfPreview] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState(null);

  // State for user search
  const [showUserSearch, setShowUserSearch] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [customers, setCustomers] = useState([]);
  const [selectedCustomer, setSelectedCustomer] = useState(null);

  useEffect(() => {
    console.log('Reports component mounted. Auth state:', { 
      isAuthenticated: isAuthenticated(), 
      user: user 
    });
    
    if (isAuthenticated()) {
      loadAreas();
      if (activeTab === 'invoices') {
        loadInvoiceData();
      }
    } else {
      console.log('User not authenticated, redirecting to login...');
      // Redirect to login if not authenticated
      window.location.href = '/login';
    }
  }, []);

  useEffect(() => {
    if (activeTab === 'invoices') {
      loadInvoiceData();
    } else if (activeTab === 'payments') {
      loadPaymentData();
    }
  }, [activeTab, invoiceFilters.dateRange.start, invoiceFilters.dateRange.end, invoiceFilters.searchQuery, paymentFilters.dateRange.start, paymentFilters.dateRange.end, paymentFilters.searchQuery]);

  const loadAreas = async () => {
    try {
      const response = await getAreas();
      setAreas(response.data);
    } catch (error) {
      console.error('Failed to load areas:', error);
    }
  };

  const loadInvoiceData = async () => {
    if (!isAuthenticated()) {
      console.log('User not authenticated, skipping API call');
      setError('Please log in to view reports.');
      return;
    }
    
    try {
      console.log('Loading invoice data...');
      setLoading(true);
      setError(null);
      
      const params = {
        startDate: invoiceFilters.dateRange.start,
        endDate: invoiceFilters.dateRange.end,
        search: invoiceFilters.searchQuery,
        page: invoiceFilters.page || 1,
        limit: 20
      };
      
      console.log('API params:', params);
      const response = await getInvoiceHistory(params);
      console.log('API response:', response);
      setInvoiceData(response.data || { invoices: [], pagination: {} });
    } catch (error) {
      console.error('Failed to load invoice data:', error);
      setError('Failed to load invoice data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const loadPaymentData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const params = {
        startDate: paymentFilters.dateRange.start,
        endDate: paymentFilters.dateRange.end,
        search: paymentFilters.searchQuery,
        page: paymentFilters.page || 1,
        limit: 20
      };
      
      const response = await getPaymentHistory(params);
      setPaymentData(response.data || { payments: [], pagination: {} });
    } catch (error) {
      console.error('Failed to load payment data:', error);
      setError('Failed to load payment data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const searchCustomersHandler = async () => {
    if (!searchQuery.trim()) return;
    
    try {
      const response = await searchCustomers({ query: searchQuery });
      setCustomers(response.data);
    } catch (error) {
      console.error('Failed to search customers:', error);
    }
  };

  const selectCustomer = async (customer) => {
    setSelectedCustomer(customer);
    setShowUserSearch(false);
    setSearchQuery('');
    
    try {
      setLoading(true);
      const response = await getUserHistory(customer.id, {
        startDate: invoiceFilters.dateRange.start,
        endDate: invoiceFilters.dateRange.end
      });
      setUserHistoryData(response.data);
    } catch (error) {
      console.error('Failed to load user history:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInvoiceFilterChange = (field, value) => {
    setInvoiceFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleDateRangeChange = (field, value) => {
    setInvoiceFilters(prev => ({
      ...prev,
      dateRange: {
        ...prev.dateRange,
        [field]: value
      }
    }));
  };

  const handlePaymentDateRangeChange = (field, value) => {
    setPaymentFilters(prev => ({
      ...prev,
      dateRange: {
        ...prev.dateRange,
        [field]: value
      }
    }));
  };

  const handlePaymentFilterChange = (field, value) => {
    setPaymentFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handlePageChange = (page) => {
    if (activeTab === 'invoices') {
      setInvoiceFilters(prev => ({ ...prev, page }));
      // Reload data with new page
      setTimeout(() => loadInvoiceData(), 0);
    } else if (activeTab === 'payments') {
      setPaymentFilters(prev => ({ ...prev, page }));
      // Reload data with new page
      setTimeout(() => loadPaymentData(), 0);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR'
    }).format(amount);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-IN');
  };

  const formatDateForDisplay = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'PAID': return 'bg-green-100 text-green-800';
      case 'PENDING': return 'bg-yellow-100 text-yellow-800';
      case 'OVERDUE': return 'bg-red-100 text-red-800';
      case 'PARTIALLY_PAID': return 'bg-blue-100 text-blue-800';
      case 'CANCELLED': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const generatePDF = async (invoice) => {
    setSelectedInvoice(invoice);
    setShowPdfPreview(true);
  };

  const generatePaymentPDF = async (payment) => {
    setSelectedPayment(payment);
    setShowPaymentPdfPreview(true);
  };

  const downloadPDF = async () => {
    if (!selectedInvoice) return;

    const pdfContent = document.getElementById('pdf-content');
    if (!pdfContent) return;

    try {
      const canvas = await html2canvas(pdfContent, {
        scale: 2,
        useCORS: true,
        allowTaint: true
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save(`Invoice-${selectedInvoice.id}.pdf`);
      setShowPdfPreview(false);
      setSelectedInvoice(null);
    } catch (error) {
      console.error('Error generating PDF:', error);
    }
  };

  const downloadPaymentPDF = async () => {
    if (!selectedPayment) return;

    const pdfContent = document.getElementById('payment-pdf-content');
    if (!pdfContent) return;

    try {
      const canvas = await html2canvas(pdfContent, {
        scale: 2,
        useCORS: true,
        allowTaint: true
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save(`Payment-${selectedPayment.id}.pdf`);
      setShowPaymentPdfPreview(false);
      setSelectedPayment(null);
    } catch (error) {
      console.error('Error generating payment PDF:', error);
    }
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-full mx-auto">
          {/* Header */}
          <div className="bg-white border-b border-gray-200 px-6 py-4">
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Reports</h1>
            <p className="text-gray-600 mt-2">View detailed reports and analytics</p>
          </div>

          {/* Tabs */}
          <div className="bg-white border-b border-gray-200">
            <div className="px-6">
              <nav className="-mb-px flex space-x-8">
                <button
                  onClick={() => setActiveTab('invoices')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'invoices'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <FileText className="w-4 h-4 inline mr-2" />
                  Invoice History
                </button>
                <button
                  onClick={() => setActiveTab('payments')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'payments'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <CreditCard className="w-4 h-4 inline mr-2" />
                  Payment History
                </button>
                <button
                  onClick={() => setActiveTab('user')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'user'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <User className="w-4 h-4 inline mr-2" />
                  User History
                </button>
              </nav>
            </div>
          </div>

          {/* Content */}
          <div className="p-6">
            {activeTab === 'invoices' && (
              <>
                {/* Search & Filters */}
                <div className="bg-white p-4 rounded-xl shadow mb-4">
                  <div className="flex flex-wrap items-center gap-4">
                    {/* Search */}
                    <div className="flex-1 max-w-md">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                        <input
                          type="text"
                          placeholder="Search by customer name..."
                          value={invoiceFilters.searchQuery}
                          onChange={(e) => handleInvoiceFilterChange('searchQuery', e.target.value)}
                          className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                    </div>

                    {/* Date Range */}
                    <div className="flex items-center gap-2">
                      <input
                        type="date"
                        value={invoiceFilters.dateRange.start}
                        onChange={(e) => handleDateRangeChange('start', e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                      />
                      <span className="text-gray-500">to</span>
                      <input
                        type="date"
                        value={invoiceFilters.dateRange.end}
                        onChange={(e) => handleDateRangeChange('end', e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                  </div>
                </div>

                {/* Error */}
                {error && (
                  <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 flex justify-between items-center">
                    <span>{error}</span>
                    <button onClick={() => setError(null)} className="text-red-700 hover:text-red-900">
                      ×
                    </button>
                  </div>
                )}

                {/* Data */}
                {loading ? (
                  <Spinner loadingTxt="Loading invoices..." />
                ) : (
                  <>
                    {/* Desktop Table Layout */}
                    <div className="hidden lg:block">
                      {/* Desktop Header Row */}
                      <div className="bg-white rounded-xl shadow-sm overflow-hidden mb-3">
                        <div className="overflow-x-auto max-w-full">
                          <div className="grid grid-cols-6 gap-4 px-6 py-4 bg-gray-50 w-full min-w-[1000px]">
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">CUSTOMER</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">INVOICE NO</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">AMOUNT</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">STATUS</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">DATE</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider text-right">ACTIONS</div>
                          </div>
                        </div>
                      </div>

                      {/* Desktop Data Rows */}
                      <div className="space-y-3 w-full">
                        {invoiceData.invoices?.length === 0 ? (
                          <div className="bg-white rounded-xl shadow-sm p-6 text-center text-gray-500">
                            No invoices found
                          </div>
                        ) : (
                          invoiceData.invoices?.map((invoice) => (
                            <div
                              key={invoice.id}
                              className="bg-white rounded-xl shadow-sm p-4 border border-gray-100 hover:shadow-md transition-shadow duration-200"
                            >
                              <div className="grid grid-cols-6 gap-4 items-center w-full min-w-[1000px]">
                                {/* CUSTOMER */}
                                <div className="flex items-center min-w-0">
                                  <div className="min-w-0 w-full">
                                    <div className="text-sm font-semibold text-gray-900 truncate">{invoice.customer.name}</div>
                                    <div className="text-xs text-gray-500 truncate">{invoice.customer.phone || 'N/A'}</div>
                                  </div>
                                </div>

                                {/* INVOICE NO */}
                                <div className="flex items-center min-w-0">
                                  <div className="font-medium text-gray-900 truncate w-full">{invoice.id}</div>
                                </div>

                                {/* AMOUNT */}
                                <div className="flex items-center min-w-0">
                                  <div className="font-medium text-gray-900 truncate w-full">₹{invoice.amountTotal}</div>
                                </div>

                                {/* STATUS */}
                                <div className="flex items-center min-w-0">
                                  <span className={`px-3 py-1 text-xs font-semibold rounded-full ${getStatusColor(invoice.status)} truncate w-full text-center`}>
                                    {invoice.status}
                                  </span>
                                </div>

                                {/* DATE */}
                                <div className="flex items-center min-w-0">
                                  <div className="text-sm text-gray-700 truncate w-full">
                                    {new Date(invoice.createdAt).toLocaleDateString()}
                                  </div>
                                </div>

                                {/* ACTIONS */}
                                <div className="flex items-center justify-end min-w-0">
                                  <button
                                    onClick={() => generatePDF(invoice)}
                                    className="inline-flex items-center justify-center w-10 h-10 rounded-md transition-all cursor-pointer
                                               hover:shadow-sm text-gray-600 hover:text-blue-600 bg-gray-50 hover:bg-blue-50
                                               group relative border border-gray-200"
                                    title="Download Invoice"
                                  >
                                    <Download className="w-5 h-5" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                    </div>

                    {/* Mobile Cards */}
                    <div className="lg:hidden">
                      {invoiceData.invoices?.length === 0 ? (
                        <div className="bg-white rounded-xl shadow-sm p-6 text-center text-gray-500">
                          No invoices found
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {invoiceData.invoices?.map((invoice) => (
                            <div
                              key={invoice.id}
                              className="bg-white rounded-xl shadow-sm p-4 border border-gray-100 hover:shadow-md transition-shadow duration-200"
                            >
                              {/* Top Section - Invoice No and Status */}
                              <div className="flex items-center justify-between mb-4">
                                <div className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                                  Invoice #{invoice.id}
                                </div>
                                <span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(invoice.status)}`}>
                                  {invoice.status}
                                </span>
                              </div>

                              {/* Two Column Layout for Data */}
                              <div className="grid grid-cols-2 gap-6 mb-4">
                                {/* Left Column */}
                                <div className="space-y-4">
                                  {/* Customer Name and Phone */}
                                  <div>
                                    <div className="text-sm font-semibold text-gray-900 mb-1">{invoice.customer.name}</div>
                                    <div className="text-xs text-gray-500">{invoice.customer.phone || 'N/A'}</div>
                                  </div>

                                  {/* Amount */}
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">Amount</div>
                                    <div className="text-lg font-bold text-gray-900">₹{invoice.amountTotal}</div>
                                  </div>
                                </div>

                                {/* Right Column */}
                                <div className="space-y-4">
                                  {/* Date */}
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">Date</div>
                                    <div className="text-sm text-gray-900">
                                      {new Date(invoice.createdAt).toLocaleDateString()}
                                    </div>
                                  </div>
                                </div>
                              </div>

                              {/* Action Button */}
                              <div className="flex items-center justify-center pt-4 border-t border-gray-100">
                                <button
                                  className="w-full flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg bg-blue-50 text-blue-600 hover:bg-blue-100 transition-colors text-sm font-medium"
                                  onClick={() => generatePDF(invoice)}
                                >
                                  <Download className="w-4 h-4" />
                                  Download Invoice
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Pagination */}
                    {invoiceData.pagination && (
                      <div className="bg-white mt-2 p-3 rounded-xl shadow">
                        {/* Desktop Pagination */}
                        <div className="hidden sm:flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                          <div className="text-sm text-gray-700">
                            Showing{" "}
                            <span className="font-medium">
                              {invoiceData.pagination.total > 0 ? (invoiceData.pagination.page - 1) * invoiceData.pagination.limit + 1 : 0}
                            </span>{" "}
                            to{" "}
                            <span className="font-medium">
                              {Math.min(invoiceData.pagination.page * invoiceData.pagination.limit, invoiceData.pagination.total)}
                            </span>{" "}
                            of <span className="font-medium">{invoiceData.pagination.total}</span> results
                          </div>

                          <div className="flex items-center gap-3">
                            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                              <button
                                onClick={() => handlePageChange(invoiceData.pagination.page - 1)}
                                disabled={!invoiceData.pagination.hasPrevious}
                                className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm
                                           font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                              >
                                <ChevronLeft className="w-5 h-5" />
                              </button>

                              {Array.from({ length: invoiceData.pagination.totalPages }, (_, i) => i + 1)
                                .filter((p) => {
                                  const cur = invoiceData.pagination.page;
                                  const total = invoiceData.pagination.totalPages;
                                  return p === 1 || p === total || (p >= cur - 1 && p <= cur + 1);
                                })
                                .map((p, idx, arr) => {
                                  const prev = arr[idx - 1];
                                  const gap = prev && p - prev > 1;
                                  return (
                                    <React.Fragment key={p}>
                                      {gap && (
                                        <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                          ...
                                        </span>
                                      )}
                                      <button
                                        onClick={() => handlePageChange(p)}
                                        className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                                          p === invoiceData.pagination.page
                                            ? "z-10 bg-emerald-50 border-emerald-500 text-emerald-700"
                                            : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50"
                                        }`}
                                      >
                                        {p}
                                      </button>
                                    </React.Fragment>
                                  );
                                })}

                              <button
                                onClick={() => handlePageChange(invoiceData.pagination.page + 1)}
                                disabled={!invoiceData.pagination.hasNext}
                                className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm
                                           font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                              >
                                <ChevronRight className="w-5 h-5" />
                              </button>
                            </nav>
                          </div>
                        </div>

                        {/* Mobile Pagination */}
                        <div className="sm:hidden">
                          {/* Results Info */}
                          <div className="text-center text-sm text-gray-700 mb-3">
                            Showing{" "}
                            <span className="font-medium">
                              {invoiceData.pagination.total > 0 ? (invoiceData.pagination.page - 1) * invoiceData.pagination.limit + 1 : 0}
                            </span>{" "}
                            to{" "}
                            <span className="font-medium">
                              {Math.min(invoiceData.pagination.page * invoiceData.pagination.limit, invoiceData.pagination.total)}
                            </span>{" "}
                            of <span className="font-medium">{invoiceData.pagination.total}</span> results
                          </div>

                          {/* Mobile Navigation */}
                          <div className="flex items-center justify-center gap-1">
                            <button
                              onClick={() => handlePageChange(invoiceData.pagination.page - 1)}
                              disabled={!invoiceData.pagination.hasPrevious}
                              className="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              <ChevronLeft className="w-4 h-4" />
                            </button>

                            {/* Current Page Indicator */}
                            <div className="flex items-center justify-center w-10 h-10 rounded-lg border border-emerald-500 bg-emerald-50 text-emerald-700 font-medium text-sm">
                              {invoiceData.pagination.page}
                            </div>

                            <span className="text-sm text-gray-500 mx-2">of {invoiceData.pagination.totalPages}</span>

                            <button
                              onClick={() => handlePageChange(invoiceData.pagination.page + 1)}
                              disabled={!invoiceData.pagination.hasNext}
                              className="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              <ChevronRight className="w-4 h-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </>
                )}
              </>
            )}
                                <span className="text-gray-500">SGST:</span>
                                <span>{formatCurrency(invoice.taxAmount / 2)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-gray-500">CGST:</span>
                                <span>{formatCurrency(invoice.taxAmount / 2)}</span>
                              </div>
                              <div className="flex justify-between border-t pt-2">
                                <span className="font-semibold">Total:</span>
                                <span className="font-semibold">{formatCurrency(invoice.amountTotal)}</span>
                              </div>
                            </div>
                            
                            <div className="mt-4 pt-3 border-t border-gray-100">
                              <button
                                onClick={() => generatePDF(invoice)}
                                className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700"
                              >
                                <Download className="w-4 h-4" />
                                Download Invoice
                              </button>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8 text-gray-500">
                          No invoices found for the selected criteria
                        </div>
                      )}
                    </div>
                  </>
                )}
              </>
            )}
            
            {activeTab === 'payments' && (
              <>
                {/* Search & Filters */}
                <div className="bg-white p-4 rounded-xl shadow mb-4">
                  <div className="flex flex-wrap items-center gap-4">
                    {/* Search */}
                    <div className="flex-1 max-w-md">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                        <input
                          type="text"
                          placeholder="Search by customer name..."
                          value={paymentFilters.searchQuery}
                          onChange={(e) => handlePaymentFilterChange('searchQuery', e.target.value)}
                          className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                    </div>

                    {/* Date Range */}
                    <div className="flex items-center gap-2">
                      <input
                        type="date"
                        value={paymentFilters.dateRange.start}
                        onChange={(e) => handlePaymentDateRangeChange('start', e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                      />
                      <span className="text-gray-500">to</span>
                      <input
                        type="date"
                        value={paymentFilters.dateRange.end}
                        onChange={(e) => handlePaymentDateRangeChange('end', e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                  </div>
                </div>

                {/* Error */}
                {error && (
                  <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 flex justify-between items-center">
                    <span>{error}</span>
                    <button onClick={() => setError(null)} className="text-red-700 hover:text-red-900">
                      ×
                    </button>
                  </div>
                )}

                {/* Data */}
                {loading ? (
                  <Spinner loadingTxt="Loading payments..." />
                ) : (
                  <>
                    {/* Desktop Table Layout */}
                    <div className="hidden lg:block">
                      {/* Desktop Header Row */}
                      <div className="bg-white rounded-xl shadow-sm overflow-hidden mb-3">
                        <div className="overflow-x-auto max-w-full">
                          <div className="grid grid-cols-6 gap-4 px-6 py-4 bg-gray-50 w-full min-w-[1000px]">
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">CUSTOMER</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">PAYMENT ID</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">AMOUNT</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">METHOD</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">DATE</div>
                            <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider text-right">ACTIONS</div>
                          </div>
                        </div>
                      </div>

                      {/* Desktop Data Rows */}
                      <div className="space-y-3 w-full">
                        {paymentData.payments?.length === 0 ? (
                          <div className="bg-white rounded-xl shadow-sm p-6 text-center text-gray-500">
                            No payments found
                          </div>
                        ) : (
                          paymentData.payments?.map((payment) => (
                            <div
                              key={payment.id}
                              className="bg-white rounded-xl shadow-sm p-4 border border-gray-100 hover:shadow-md transition-shadow duration-200"
                            >
                              <div className="grid grid-cols-6 gap-4 items-center w-full min-w-[1000px]">
                                {/* CUSTOMER */}
                                <div className="flex items-center min-w-0">
                                  <div className="min-w-0 w-full">
                                    <div className="text-sm font-semibold text-gray-900 truncate">{payment.customer.name}</div>
                                    <div className="text-xs text-gray-500 truncate">{payment.customer.phone || 'N/A'}</div>
                                  </div>
                                </div>

                                {/* PAYMENT ID */}
                                <div className="flex items-center min-w-0">
                                  <div className="font-medium text-gray-900 truncate w-full">{payment.id}</div>
                                </div>

                                {/* AMOUNT */}
                                <div className="flex items-center min-w-0">
                                  <div className="font-medium text-gray-900 truncate w-full">₹{payment.amount}</div>
                                </div>

                                {/* METHOD */}
                                <div className="flex items-center min-w-0">
                                  <div className="text-sm text-gray-700 truncate w-full">{payment.method}</div>
                                </div>

                                {/* DATE */}
                                <div className="flex items-center min-w-0">
                                  <div className="text-sm text-gray-700 truncate w-full">
                                    {new Date(payment.collectedAt).toLocaleDateString()}
                                  </div>
                                </div>

                                {/* ACTIONS */}
                                <div className="flex items-center justify-end min-w-0">
                                  <button
                                    onClick={() => generatePaymentPDF(payment)}
                                    className="inline-flex items-center justify-center w-10 h-10 rounded-md transition-all cursor-pointer
                                               hover:shadow-sm text-gray-600 hover:text-blue-600 bg-gray-50 hover:bg-blue-50
                                               group relative border border-gray-200"
                                    title="Download Receipt"
                                  >
                                    <Download className="w-5 h-5" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                    </div>

                    {/* Mobile Cards */}
                    <div className="lg:hidden">
                      {paymentData.payments?.length === 0 ? (
                        <div className="bg-white rounded-xl shadow-sm p-6 text-center text-gray-500">
                          No payments found
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {paymentData.payments?.map((payment) => (
                            <div
                              key={payment.id}
                              className="bg-white rounded-xl shadow-sm p-4 border border-gray-100 hover:shadow-md transition-shadow duration-200"
                            >
                              {/* Top Section - Payment ID and Method */}
                              <div className="flex items-center justify-between mb-4">
                                <div className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                                  Payment #{payment.id}
                                </div>
                                <span className="text-sm font-semibold text-green-600">
                                  {payment.method}
                                </span>
                              </div>

                              {/* Two Column Layout for Data */}
                              <div className="grid grid-cols-2 gap-6 mb-4">
                                {/* Left Column */}
                                <div className="space-y-4">
                                  {/* Customer Name and Phone */}
                                  <div>
                                    <div className="text-sm font-semibold text-gray-900 mb-1">{payment.customer.name}</div>
                                    <div className="text-xs text-gray-500">{payment.customer.phone || 'N/A'}</div>
                                  </div>

                                  {/* Amount */}
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">Amount</div>
                                    <div className="text-lg font-bold text-gray-900">₹{payment.amount}</div>
                                  </div>
                                </div>

                                {/* Right Column */}
                                <div className="space-y-4">
                                  {/* Date */}
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">Date</div>
                                    <div className="text-sm text-gray-900">
                                      {new Date(payment.collectedAt).toLocaleDateString()}
                                    </div>
                                  </div>
                                </div>
                              </div>

                              {/* Action Button */}
                              <div className="flex items-center justify-center pt-4 border-t border-gray-100">
                                <button
                                  className="w-full flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg bg-blue-50 text-blue-600 hover:bg-blue-100 transition-colors text-sm font-medium"
                                  onClick={() => generatePaymentPDF(payment)}
                                >
                                  <Download className="w-4 h-4" />
                                  Download Receipt
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Pagination */}
                    {paymentData.pagination && (
                      <div className="bg-white mt-2 p-3 rounded-xl shadow">
                        {/* Desktop Pagination */}
                        <div className="hidden sm:flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                          <div className="text-sm text-gray-700">
                            Showing{" "}
                            <span className="font-medium">
                              {paymentData.pagination.total > 0 ? (paymentData.pagination.page - 1) * paymentData.pagination.limit + 1 : 0}
                            </span>{" "}
                            to{" "}
                            <span className="font-medium">
                              {Math.min(paymentData.pagination.page * paymentData.pagination.limit, paymentData.pagination.total)}
                            </span>{" "}
                            of <span className="font-medium">{paymentData.pagination.total}</span> results
                          </div>

                          <div className="flex items-center gap-3">
                            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                              <button
                                onClick={() => handlePageChange(paymentData.pagination.page - 1)}
                                disabled={!paymentData.pagination.hasPrevious}
                                className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm
                                           font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                              >
                                <ChevronLeft className="w-5 h-5" />
                              </button>

                              {Array.from({ length: paymentData.pagination.totalPages }, (_, i) => i + 1)
                                .filter((p) => {
                                  const cur = paymentData.pagination.page;
                                  const total = paymentData.pagination.totalPages;
                                  return p === 1 || p === total || (p >= cur - 1 && p <= cur + 1);
                                })
                                .map((p, idx, arr) => {
                                  const prev = arr[idx - 1];
                                  const gap = prev && p - prev > 1;
                                  return (
                                    <React.Fragment key={p}>
                                      {gap && (
                                        <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                          ...
                                        </span>
                                      )}
                                      <button
                                        onClick={() => handlePageChange(p)}
                                        className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                                          p === paymentData.pagination.page
                                            ? "z-10 bg-emerald-50 border-emerald-500 text-emerald-700"
                                            : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50"
                                        }`}
                                      >
                                        {p}
                                      </button>
                                    </React.Fragment>
                                  );
                                })}

                              <button
                                onClick={() => handlePageChange(paymentData.pagination.page + 1)}
                                disabled={!paymentData.pagination.hasNext}
                                className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm
                                           font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                              >
                                <ChevronRight className="w-5 h-5" />
                              </button>
                            </nav>
                          </div>
                        </div>

                        {/* Mobile Pagination */}
                        <div className="sm:hidden">
                          {/* Results Info */}
                          <div className="text-center text-sm text-gray-700 mb-3">
                            Showing{" "}
                            <span className="font-medium">
                              {paymentData.pagination.total > 0 ? (paymentData.pagination.page - 1) * paymentData.pagination.limit + 1 : 0}
                            </span>{" "}
                            to{" "}
                            <span className="font-medium">
                              {Math.min(paymentData.pagination.page * paymentData.pagination.limit, paymentData.pagination.total)}
                            </span>{" "}
                            of <span className="font-medium">{paymentData.pagination.total}</span> results
                          </div>

                          {/* Mobile Navigation */}
                          <div className="flex items-center justify-center gap-1">
                            <button
                              onClick={() => handlePageChange(paymentData.pagination.page - 1)}
                              disabled={!paymentData.pagination.hasPrevious}
                              className="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              <ChevronLeft className="w-4 h-4" />
                            </button>

                            {/* Current Page Indicator */}
                            <div className="flex items-center justify-center w-10 h-10 rounded-lg border border-emerald-500 bg-emerald-50 text-emerald-700 font-medium text-sm">
                              {paymentData.pagination.page}
                            </div>

                            <span className="text-sm text-gray-500 mx-2">of {paymentData.pagination.totalPages}</span>

                            <button
                              onClick={() => handlePageChange(paymentData.pagination.page + 1)}
                              disabled={!paymentData.pagination.hasNext}
                              className="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              <ChevronRight className="w-4 h-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </>
                )}
              </>
            )}
                  <>
                    {/* Desktop Table */}
                    <div className="hidden md:block overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CUSTOMER</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PAYMENT ID</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AMOUNT</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">METHOD</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">DATE</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">COLLECTOR</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ACTIONS</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {paymentData.payments && paymentData.payments.length > 0 ? (
                            paymentData.payments.map((payment) => (
                              <tr key={payment.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  <div>
                                    <div className="font-semibold">{payment.customer.name}</div>
                                    <div className="text-gray-500">{payment.customer.phone || 'N/A'}</div>
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {payment.id}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">
                                  {formatCurrency(payment.amount)}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  <span className="capitalize">{payment.method}</span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {formatDateForDisplay(payment.collectedAt)}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {payment.collector}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  <button
                                    onClick={() => generatePaymentPDF(payment)}
                                    className="flex items-center gap-1 text-blue-600 hover:text-blue-800"
                                  >
                                    <Download className="w-4 h-4" />
                                    Download
                                  </button>
                                </td>
                              </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan="7" className="px-6 py-8 text-center text-gray-500">
                                No payments found for the selected criteria
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>

                    {/* Mobile Cards */}
                    <div className="md:hidden space-y-4 p-4">
                      {paymentData.payments && paymentData.payments.length > 0 ? (
                        paymentData.payments.map((payment) => (
                          <div key={payment.id} className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                            <div className="flex justify-between items-start mb-3">
                              <div>
                                <h3 className="font-semibold text-gray-900">{payment.customer.name}</h3>
                                <p className="text-sm text-gray-500">{payment.customer.phone || 'N/A'}</p>
                              </div>
                              <span className="text-sm font-semibold text-green-600">
                                {formatCurrency(payment.amount)}
                              </span>
                            </div>
                            
                            <div className="space-y-2 text-sm">
                              <div className="flex justify-between">
                                <span className="text-gray-500">Payment ID:</span>
                                <span className="font-medium">{payment.id}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-gray-500">Method:</span>
                                <span className="capitalize">{payment.method}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-gray-500">Date:</span>
                                <span>{formatDateForDisplay(payment.collectedAt)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-gray-500">Collector:</span>
                                <span>{payment.collector}</span>
                              </div>
                            </div>
                            
                            <div className="mt-4 pt-3 border-t border-gray-100">
                              <button
                                onClick={() => generatePaymentPDF(payment)}
                                className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700"
                              >
                                <Download className="w-4 h-4" />
                                Download Receipt
                              </button>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8 text-gray-500">
                          No payments found for the selected criteria
                        </div>
                      )}
                    </div>
                  </>
                )}
              </>
            )}
            
            {activeTab === 'user' && (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">User History</h2>
                <p className="text-gray-600">User history functionality will be implemented here.</p>
              </div>
            )}
          </div>

          {/* PDF Preview Modal */}
          {showPdfPreview && selectedInvoice && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
              <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
                <div className="flex items-center justify-between p-4 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Invoice Preview - Bill #{selectedInvoice.id}
                  </h3>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={downloadPDF}
                      className="px-4 py-2 bg-green-600 text-white rounded-lg text-sm font-medium hover:bg-green-700"
                    >
                      Download PDF
                    </button>
                    <button
                      onClick={() => {
                        setShowPdfPreview(false);
                        setSelectedInvoice(null);
                      }}
                      className="p-2 text-gray-400 hover:text-gray-600"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                </div>
                <div className="p-6 overflow-auto max-h-[calc(90vh-120px)]">
                  <div id="pdf-content" className="bg-white p-8 border border-gray-200">
                    {/* Company Header */}
                    <div className="text-center mb-8">
                      <h1 className="text-3xl font-bold text-gray-900 mb-2">BroadbandX</h1>
                      <p className="text-gray-600">Internet Service Provider</p>
                      <p className="text-gray-600">GST No: 27AABCB1234Z1Z5</p>
                    </div>

                    {/* Invoice Details */}
                    <div className="flex justify-between mb-8">
                      <div>
                        <h2 className="text-xl font-semibold text-gray-900 mb-4">INVOICE</h2>
                        <div className="space-y-2">
                          <p><strong>Bill No:</strong> {selectedInvoice.id}</p>
                          <p><strong>Customer:</strong> {selectedInvoice.customer.name}</p>
                          <p><strong>Customer Code:</strong> {selectedInvoice.customer.customerCode}</p>
                          <p><strong>Area:</strong> {selectedInvoice.customer.area}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="space-y-2">
                          <p><strong>Bill From:</strong> {formatDateForDisplay(selectedInvoice.periodStart)}</p>
                          <p><strong>Bill To:</strong> {formatDateForDisplay(selectedInvoice.periodEnd)}</p>
                          <p><strong>Billed On:</strong> {formatDateForDisplay(selectedInvoice.createdAt)}</p>
                          <p><strong>Due Date:</strong> {formatDateForDisplay(selectedInvoice.dueDate)}</p>
                        </div>
                      </div>
                    </div>

                    {/* Invoice Items */}
                    <div className="mb-8">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-100">
                            <th className="border border-gray-300 px-4 py-2 text-left">Description</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">Amount</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td className="border border-gray-300 px-4 py-2">Internet Service Charges</td>
                            <td className="border border-gray-300 px-4 py-2 text-right">{formatCurrency(selectedInvoice.amountDue)}</td>
                          </tr>
                          {selectedInvoice.discounts > 0 && (
                            <tr>
                              <td className="border border-gray-300 px-4 py-2">Discounts</td>
                              <td className="border border-gray-300 px-4 py-2 text-right">-{formatCurrency(selectedInvoice.discounts)}</td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>

                    {/* Tax Summary */}
                    <div className="flex justify-end mb-8">
                      <div className="w-64 space-y-2">
                        <div className="flex justify-between">
                          <span>Sub Total:</span>
                          <span>{formatCurrency(selectedInvoice.amountDue)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>SGST (9%):</span>
                          <span>{formatCurrency(selectedInvoice.taxAmount / 2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>CGST (9%):</span>
                          <span>{formatCurrency(selectedInvoice.taxAmount / 2)}</span>
                        </div>
                        <div className="flex justify-between font-bold text-lg border-t pt-2">
                          <span>Total:</span>
                          <span>{formatCurrency(selectedInvoice.amountTotal)}</span>
                        </div>
                      </div>
                    </div>

                    {/* Payment Status */}
                    <div className="mb-8">
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h3 className="font-semibold text-gray-900 mb-2">Payment Status</h3>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <p><strong>Total Paid:</strong> {formatCurrency(selectedInvoice.totalPaid)}</p>
                            <p><strong>Balance:</strong> {formatCurrency(selectedInvoice.balance)}</p>
                          </div>
                          <div>
                            <p><strong>Status:</strong> 
                              <span className={`ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(selectedInvoice.status)}`}>
                                {selectedInvoice.status}
                              </span>
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Footer */}
                    <div className="text-center text-gray-600 text-sm">
                      <p>Thank you for your business!</p>
                      <p>For any queries, please contact us at support@broadbandx.com</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Payment PDF Preview Modal */}
          {showPaymentPdfPreview && selectedPayment && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
              <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
                <div className="flex items-center justify-between p-4 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Payment Receipt - #{selectedPayment.id}
                  </h3>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={downloadPaymentPDF}
                      className="px-4 py-2 bg-green-600 text-white rounded-lg text-sm font-medium hover:bg-green-700"
                    >
                      Download PDF
                    </button>
                    <button
                      onClick={() => {
                        setShowPaymentPdfPreview(false);
                        setSelectedPayment(null);
                      }}
                      className="p-2 text-gray-400 hover:text-gray-600"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                </div>
                <div className="p-6 overflow-auto max-h-[calc(90vh-120px)]">
                  <div id="payment-pdf-content" className="bg-white p-8 border border-gray-200">
                    {/* Company Header */}
                    <div className="text-center mb-8">
                      <h1 className="text-3xl font-bold text-gray-900 mb-2">BroadbandX</h1>
                      <p className="text-gray-600">Internet Service Provider</p>
                      <p className="text-gray-600">GST No: 27AABCB1234Z1Z5</p>
                    </div>

                    {/* Payment Details */}
                    <div className="flex justify-between mb-8">
                      <div>
                        <h2 className="text-xl font-semibold text-gray-900 mb-4">PAYMENT RECEIPT</h2>
                        <div className="space-y-2">
                          <p><strong>Receipt No:</strong> {selectedPayment.id}</p>
                          <p><strong>Customer:</strong> {selectedPayment.customer.name}</p>
                          <p><strong>Customer Code:</strong> {selectedPayment.customer.customerCode}</p>
                          <p><strong>Area:</strong> {selectedPayment.customer.area}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="space-y-2">
                          <p><strong>Payment Date:</strong> {formatDateForDisplay(selectedPayment.collectedAt)}</p>
                          <p><strong>Payment Method:</strong> {selectedPayment.method}</p>
                          <p><strong>Collected By:</strong> {selectedPayment.collector}</p>
                        </div>
                      </div>
                    </div>

                    {/* Payment Summary */}
                    <div className="mb-8">
                      <div className="bg-gray-50 p-6 rounded-lg">
                        <h3 className="font-semibold text-gray-900 mb-4">Payment Summary</h3>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <span className="text-lg">Amount Paid:</span>
                            <span className="text-2xl font-bold text-green-600">{formatCurrency(selectedPayment.amount)}</span>
                          </div>
                          <div className="border-t pt-3">
                            <p className="text-sm text-gray-600">
                              <strong>Payment Method:</strong> {selectedPayment.method.toUpperCase()}
                            </p>
                            {selectedPayment.comments && (
                              <p className="text-sm text-gray-600 mt-1">
                                <strong>Comments:</strong> {selectedPayment.comments}
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Footer */}
                    <div className="text-center text-gray-600 text-sm">
                      <p>Thank you for your payment!</p>
                      <p>For any queries, please contact us at support@broadbandx.com</p>
                      <p className="mt-4 text-xs">This is a computer generated receipt and does not require a signature.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
};

export default Reports;
